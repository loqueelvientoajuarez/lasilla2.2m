#! /usr/bin/env python3

## Version of Feb 12 2016

import sys
import os
sys.path.append(os.path.join(os.environ['HOME'], 'python'))

import re
import datetime
from MPG.esolog import PeriodLog, NightLog
from MPG.esolog import write_program_report, write_telescope_use_report
from MPG.utils import argparser

if __name__ == "__main__":
    parser = argparser(
        description='Night log generator for the MPG 2.2m telescope',
        wwwsubdir='logs')
    parser.add_argument('--overwrite-header', dest='clobberHeader',
            help='Download and overwrite existing FITS headers',
            action='store_true', default=False)
    parser.add_argument('--compact', dest='compact',
            help='Generate compact logs',
            action='store_true', default=True)
    parser.add_argument('--overwrite-header-list', dest='clobberHeaderList',
            help='Download and overwrite header list for the night(s)',
            action='store_true', default=False)
    parser.add_argument('--overwrite-night-log', dest='clobberNightLog',
            help='Overwrite existing night logs',
            action='store_true', default=False)
    parser.add_argument('--overwrite-period-log', dest='clobberPeriodLog',
            help='Overwrite existing period logs',
            action='store_true', default=False)
    parser.add_argument('--overwrite-last-nights', dest='clobberLastNights',
            help='Overwrite header lists and logs of the last nights',
            action='store_true', default=False)
    parser.add_argument('period', nargs='*', 
            help='List of nights or ESO periods')
    parser.add_argument('--summary', action='store_true', default=False,
            help='Write a summary of programme completion and telescope use.')
    parser.add_argument('--plot', action='store_true', default=False,
            help='Plot a visual summary')
    parser.add_argument('--verbose', 
            help='Print information about the process',
            action='store_false', dest='verbose', default='True')
    arg = parser.parse_args()
    #if len(arg.period) == 0:
    #    arg.period = ['96'] 
    #    arg.clobberNightLog = True 
    #    arg.clobberPeriodLog = True 
    for x in arg.period:
        is_period = re.match('^[0-9]{2,3}$', x)
        if is_period:
            p = int(x)
            print('read or generate period log', p)
            log = PeriodLog.read(period=p, tel=arg.tel, path=arg.dir,
                    clobber=arg.clobberPeriodLog, compact=arg.compact, 
                    clobberNightLog=arg.clobberNightLog,
                    clobberHeaderList=arg.clobberHeaderList,
                    clobberHeader=arg.clobberHeader,
                    clobberLastNights=arg.clobberLastNights)
            filename = log.get_path(fileext='html')
            info = log.info()[4:] + '. '
            info += 'Automatically generated using ESO raw data archive on '
            info += datetime.date.today().strftime('%d %B %Y.')
            log.write(filename, compact=arg.compact, 
                       show_units=True, format='ascii.html_with_groups', 
                        htmldict={'table_attr': {'class': 'horizontal log'},
                            'caption': 'Observation logs ' + info})
            if arg.summary:
                progs = log.report_program_completion()
                progfile = log.get_path(fileext='-progcomp.html')
                write_program_report(progs, progfile, info=info)
                use = log.report_use()
                usefile = log.get_path(fileext='-teluse.html')
                write_telescope_use_report(use, usefile, info=info)
            if arg.publish:
                pdir = 'P{}'.format(p)
                rdir = os.path.join(arg.rdir, 'nightlogs', pdir)
                os.system('scp {} {}'.format(filename, rdir))
                if arg.summary:
                    rdir = os.path.join(arg.rdir, 'summary', pdir)
                    os.system('scp {} {} {}'.format(usefile, progfile, rdir))
        else:
            n = x
            print('NightLog.read', False)
            log = NightLog.read(night=n, tel=arg.tel, path=arg.dir,
                    clobber=arg.clobberNightLog, compact=arg.compact,
                    clobberHeaderList=arg.clobberHeaderList,
                    clobberHeader=arg.clobberHeader,
                    clobberLastNights=arg.clobberLastNights)
            #log.write(compact=True)
    #progs = log.report_program_completion()
    #use = log.report_use(show=True)


